/* 2023-07-10T21:24:42Z */

/* ----------------------------------------------------------------------
Copyright (c) 2022-2023 Neuton.AI, Inc.
*
The source code and its binary form are being made available on the following terms:
Redistribution, use, and modification are permitted provided that the following
conditions are met:
*
1. Redistributions of source code and/or its binary form must retain the above copyright notice,
* this list of conditions (and the disclaimer) either in the body of the source code or in
* the documentation and/or other materials provided with the distribution of the binary form, as
applicable.
*
2. The name of the copyright holder may not be used to endorse or promote products derived from this
* source code or its binary form without specific prior written permission of Neuton.AI, Inc.
*
3. Disclaimer. THIS SOURCE CODE AND ITS BINARY FORM ARE PROVIDED BY THE COPYRIGHT HOLDER "AS IS".
* THE COPYRIGHT HOLDER HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
* BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
* PARTICULAR PURPOSE. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE HELD LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS
* OF THIRD PARTIES; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
* IN ANY WAY OUT OF THE USE OF THIS SOURCE CODE OR ITS BINARY FORM, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
---------------------------------------------------------------------- */

/** Defines input(also used for LAG) features MIN scaling factor
 */
static const neuton_input_t INPUT_FEATURES_SCALE_MIN[] = { 0 };

/** Defines input(also used for LAG) features MAX scaling factor
 */
static const neuton_input_t INPUT_FEATURES_SCALE_MAX[] = { 0 };

/** Defines which unique input features is used for LAG features processing,
 *  one bit for one unique feature, starting from LSB
 */
static const neuton_u8_t INPUT_FEATURES_USED_FOR_LAGS_MASK[] = { 0x00 };

/** Defines DSP feature calculation masks used as neuton_dsp_features_mask_t,
 *  32 bit for one unique feature, @ref neuton_dsp_features_mask_t to see bitmask
 */
static const neuton_u32_t DSP_FEATURES_CALCULATION_MASK[] = {
	-1248919552, -1216217088, -182779904, -1214447616, -174129152, -157351936 };

/** Defines DSP feature calculation arguments used by DSP pipeline,
 *  32 bit for one feature argument
 */
static const neuton_input_t DSP_FEATURES_CALCULATION_ARGS[] = {
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 };

/** Defines DSP features MAX scaling factor
 */
static const neuton_feature_t DSP_FEATURES_SCALE_MIN[] = {
	-7.2466602325439453, 0, 0.85543370246887207, -2.0776681900024414, 0.17753362655639648,
	0.17983987927436829, 0, 0.75882327556610107, 0.1938183605670929, 0.014128468930721283,
	-9.4444599151611328, 0.13358122110366821, 4.3724832534790039, 0.0050251255743205547,
	0, 0.60839653015136719, 0.44002723693847656, 0.056483883410692215, -6.9200401306152344,
	0, -1.5361132621765137, 0.012582164257764816, 0.027885457500815392, 0,
	0.1510470062494278, 0.05832492932677269, 0.011156524531543255, 0.0040641892701387405,
	-123.47599792480469, 2.3362400531768799, -10.902444839477539, 0.24304746091365814,
	0.3965688943862915, 0.40290826559066772, 0.0050251255743205547, 0.0050251255743205547,
	2.1262421607971191, 0.92749869823455811, 0.058838877826929092, -169.11700439453125,
	0, 3.1674880981445312, -9.8187942504882812, 0.1967339962720871, 0.42229956388473511,
	0.42244181036949158, 0.0050251255743205547, 2.7956147193908691, 0.51405525207519531,
	0.18886478245258331, 0.045116882771253586, -113.21199798583984, 0, 1.9111900329589844,
	-11.070470809936523, 0.1993110328912735, 0.34634366631507874, 0.0050251255743205547,
	0, 1.7543656826019287, 0.5946614146232605, 0.15290540456771851, 0.043504457920789719 };

/** Defines DSP features MIN scaling factor
 */
static const neuton_feature_t DSP_FEATURES_SCALE_MAX[] = {
	0, 7.2634100914001465, 12.050239562988281, 2.6640288829803467, 2.4640119075775146,
	3.591855525970459, 0.070351757109165192, 10.6202392578125, 5.1906332969665527,
	0.40512016415596008, 0, 4.9743785858154297, 9.7554607391357422, 0.21608039736747742,
	0.015075377188622952, 13.080649375915527, 11.670651435852051, 0.25935694575309753,
	0, 6.2177400588989258, 1.3993873596191406, 2.5126767158508301, 3.2408628463745117,
	0.11557789146900177, 8.570185661315918, 3.3313980102539062, 2.0792417526245117,
	0.20472458004951477, -0.41597500443458557, 239.09298706054688, 10.534662246704102,
	33.781688690185547, 53.422290802001953, 53.423557281494141, 0.10050251334905624,
	0.080402009189128876, 235.44224548339844, 34.352455139160156, 2.786536693572998,
	-0.097020097076892853, 185.30099487304688, 341.7919921875, 12.421164512634277,
	47.489429473876953, 71.809837341308594, 71.82305908203125, 0.070351757109165192,
	339.23223876953125, 82.448989868164062, 44.319217681884766, 8.379786491394043,
	0, 96.244697570800781, 187.88819885253906, 8.0694961547851562, 28.689088821411133,
	40.478878021240234, 0.09045226126909256, 0.080402009189128876, 184.33572387695312,
	48.568870544433594, 28.640375137329102, 4.301206111907959 };

